


ARM Macro Assembler    Page 1 


    1 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    2 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    3 00000000         ;;;           ;;; 
    4 00000000         ;;;   Name: Justin Igmen    ;;;
    5 00000000         ;;;   SID: 200364880     ;;;
    6 00000000         ;;;   Class: ENSE 352     ;;;
    7 00000000         ;;;   Project: Whack-a-mole   ;;;
    8 00000000         ;;;           ;;; 
    9 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   10 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   11 00000000         
   12 00000000         ;;; Directives
   13 00000000                 PRESERVE8
   14 00000000                 THUMB
   15 00000000         
   16 00000000         
   17 00000000         ;;; Equates
   18 00000000         
   19 00000000 20001000 
                       INITIAL_MSP
                               EQU              0x20001000  ; Initial Main Stac
                                                            k Pointer Value
   20 00000000         
   21 00000000         
   22 00000000         ;PORT A GPIO - Base Addr: 0x40010800
   23 00000000 40010800 
                       GPIOA_CRL
                               EQU              0x40010800  ; (0x00) Port Confi
                                                            guration Register f
                                                            or Px7 -> Px0
   24 00000000 40010804 
                       GPIOA_CRH
                               EQU              0x40010804  ; (0x04) Port Confi
                                                            guration Register f
                                                            or Px15 -> Px8
   25 00000000 40010808 
                       GPIOA_IDR
                               EQU              0x40010808  ; (0x08) Port Input
                                                             Data Register
   26 00000000 4001080C 
                       GPIOA_ODR
                               EQU              0x4001080C  ; (0x0C) Port Outpu
                                                            t Data Register
   27 00000000 40010810 
                       GPIOA_BSRR
                               EQU              0x40010810  ; (0x10) Port Bit S
                                                            et/Reset Register
   28 00000000 40010814 
                       GPIOA_BRR
                               EQU              0x40010814  ; (0x14) Port Bit R
                                                            eset Register
   29 00000000 40010818 
                       GPIOA_LCKR
                               EQU              0x40010818  ; (0x18) Port Confi
                                                            guration Lock Regis
                                                            ter
   30 00000000         
   31 00000000         ;PORT B GPIO - Base Addr: 0x40010C00
   32 00000000 40010C00 



ARM Macro Assembler    Page 2 


                       GPIOB_CRL
                               EQU              0x40010C00  ; (0x00) Port Confi
                                                            guration Register f
                                                            or Px7 -> Px0
   33 00000000 40010C04 
                       GPIOB_CRH
                               EQU              0x40010C04  ; (0x04) Port Confi
                                                            guration Register f
                                                            or Px15 -> Px8
   34 00000000 40010C08 
                       GPIOB_IDR
                               EQU              0x40010C08  ; (0x08) Port Input
                                                             Data Register
   35 00000000 40010C0C 
                       GPIOB_ODR
                               EQU              0x40010C0C  ; (0x0C) Port Outpu
                                                            t Data Register
   36 00000000 40010C10 
                       GPIOB_BSRR
                               EQU              0x40010C10  ; (0x10) Port Bit S
                                                            et/Reset Register
   37 00000000 40010C14 
                       GPIOB_BRR
                               EQU              0x40010C14  ; (0x14) Port Bit R
                                                            eset Register
   38 00000000 40010C18 
                       GPIOB_LCKR
                               EQU              0x40010C18  ; (0x18) Port Confi
                                                            guration Lock Regis
                                                            ter
   39 00000000         
   40 00000000         ;The onboard LEDS are on port C bits 8 and 9
   41 00000000         ;PORT C GPIO - Base Addr: 0x40011000
   42 00000000 40011000 
                       GPIOC_CRL
                               EQU              0x40011000  ; (0x00) Port Confi
                                                            guration Register f
                                                            or Px7 -> Px0
   43 00000000 40011004 
                       GPIOC_CRH
                               EQU              0x40011004  ; (0x04) Port Confi
                                                            guration Register f
                                                            or Px15 -> Px8
   44 00000000 40011008 
                       GPIOC_IDR
                               EQU              0x40011008  ; (0x08) Port Input
                                                             Data Register
   45 00000000 4001100C 
                       GPIOC_ODR
                               EQU              0x4001100C  ; (0x0C) Port Outpu
                                                            t Data Register
   46 00000000 40011010 
                       GPIOC_BSRR
                               EQU              0x40011010  ; (0x10) Port Bit S
                                                            et/Reset Register
   47 00000000 40011014 
                       GPIOC_BRR
                               EQU              0x40011014  ; (0x14) Port Bit R
                                                            eset Register



ARM Macro Assembler    Page 3 


   48 00000000 40011018 
                       GPIOC_LCKR
                               EQU              0x40011018  ; (0x18) Port Confi
                                                            guration Lock Regis
                                                            ter
   49 00000000         
   50 00000000         ;Registers for configuring and enabling the clocks
   51 00000000         ;RCC Registers - Base Addr: 0x40021000
   52 00000000 40021000 
                       RCC_CR  EQU              0x40021000  ; Clock Control Reg
                                                            ister
   53 00000000 40021004 
                       RCC_CFGR
                               EQU              0x40021004  ; Clock Configurati
                                                            on Register
   54 00000000 40021008 
                       RCC_CIR EQU              0x40021008  ; Clock Interrupt R
                                                            egister
   55 00000000 4002100C 
                       RCC_APB2RSTR
                               EQU              0x4002100C  ; APB2 Peripheral R
                                                            eset Register
   56 00000000 40021010 
                       RCC_APB1RSTR
                               EQU              0x40021010  ; APB1 Peripheral R
                                                            eset Register
   57 00000000 40021014 
                       RCC_AHBENR
                               EQU              0x40021014  ; AHB Peripheral Cl
                                                            ock Enable Register
                                                            
   58 00000000         
   59 00000000 40021018 
                       RCC_APB2ENR
                               EQU              0x40021018  ; APB2 Peripheral C
                                                            lock Enable Registe
                                                            r  -- Used
   60 00000000         
   61 00000000 4002101C 
                       RCC_APB1ENR
                               EQU              0x4002101C  ; APB1 Peripheral C
                                                            lock Enable Registe
                                                            r
   62 00000000 40021020 
                       RCC_BDCR
                               EQU              0x40021020  ; Backup Domain Con
                                                            trol Register
   63 00000000 40021024 
                       RCC_CSR EQU              0x40021024  ; Control/Status Re
                                                            gister
   64 00000000 4002102C 
                       RCC_CFGR2
                               EQU              0x4002102C  ; Clock Configurati
                                                            on Register 2
   65 00000000         
   66 00000000         ; Times for delay routines
   67 00000000         
   68 00000000         ;1600000 = (200 ms/24MHz PLL)
   69 00000000         



ARM Macro Assembler    Page 4 


   70 00000000 000186A0 
                       DELAYTIME
                               EQU              100000
   71 00000000 000C3500 
                       PrelimWait
                               EQU              800000
   72 00000000 00061A80 
                       ReactTime
                               EQU              400000
   73 00000000 000186A0 
                       WinLoseDelay
                               EQU              100000
   74 00000000 00249F00 
                       TimeToGoBack
                               EQU              2400000
   75 00000000         
   76 00000000         ;=================Randomizer==============
   77 00000000 00003039 
                       A       EQU              12345
   78 00000000 00010932 
                       C       EQU              67890
   79 00000000         
   80 00000000         
   81 00000000         
   82 00000000         ; Vector Table Mapped to Address 0 at Reset
   83 00000000                 AREA             RESET, Data, READONLY
   84 00000000                 EXPORT           __Vectors
   85 00000000         
   86 00000000 20001000 
                       __Vectors
                               DCD              INITIAL_MSP ; stack pointer val
                                                            ue when stack is em
                                                            pty
   87 00000004 00000000        DCD              Reset_Handler ; reset vector
   88 00000008         
   89 00000008                 AREA             MYCODE, CODE, READONLY
   90 00000000                 EXPORT           Reset_Handler
   91 00000000                 ENTRY
   92 00000000         
   93 00000000         Reset_Handler
                               PROC
   94 00000000         
   95 00000000 F7FF FFFE       BL               GPIO_ClockInit
   96 00000004 F7FF FFFE       BL               GPIO_init
   97 00000008         
   98 00000008         mainLoop
   99 00000008 F7FF FFFE       bl               waiting     ;UC2 Waiting for Pl
                                                            ayer
  100 0000000C F7FF FFFE       bl               normalGameplay 
                                                            ;Normal Game Play
  101 00000010         
  102 00000010 2801            cmp              r0, #1      ;value from normalG
                                                            ameplay
  103 00000012 D001            beq              win_main
  104 00000014 2800            cmp              r0, #0
  105 00000016 D002            beq              lose_main
  106 00000018         
  107 00000018         win_main
  108 00000018 F7FF FFFE       bl               win_mode



ARM Macro Assembler    Page 5 


  109 0000001C E7F4            B                mainLoop
  110 0000001E         lose_main
  111 0000001E F7FF FFFE       bl               lose_mode
  112 00000022 E7F1            B                mainLoop
  113 00000024                 ENDP
  114 00000024         
  115 00000024         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;Subroutines ;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;
  116 00000024         
  117 00000024         ;Initializes the clock
  118 00000024         ;Turns on ports A and C
  119 00000024                 ALIGN
  120 00000024         GPIO_ClockInit
                               PROC
  121 00000024         
  122 00000024 49D4            ldr              r1, =RCC_APB2ENR
  123 00000026 6808            ldr              r0, [r1]
  124 00000028 F040 001C       orr              r0, #0x1C
  125 0000002C 6008            str              r0, [r1]
  126 0000002E         
  127 0000002E 4770            BX               LR
  128 00000030                 ENDP
  129 00000030         
  130 00000030         
  131 00000030         
  132 00000030         ;Initializes I/O
  133 00000030         ;Output: 50MHz, general purpose push-pull
  134 00000030         ;Input
  135 00000030                 ALIGN
  136 00000030         GPIO_init
                               PROC
  137 00000030         
  138 00000030         ; ENEL 384 board LEDs: D1 - PA9, D2 - PA10, D3 - PA11, D
                       4 - PA12
  139 00000030         
  140 00000030 49D2            ldr              r1, =GPIOA_CRH
  141 00000032 6808            ldr              r0, [r1]
  142 00000034 F243 3034 
              F2C4 4043        mov32            r0, #0x44433334
  143 0000003C 6008            str              r0, [r1]
  144 0000003E         
  145 0000003E 4770            BX               LR
  146 00000040                 ENDP
  147 00000040         
  148 00000040         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  149 00000040         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  150 00000040         ;;;
  151 00000040         ;;; Subroutine: waiting
  152 00000040         ;;; 
  153 00000040         ;;; UC2 - Waiting for Player
  154 00000040         ;;; This function displays an LED pattern that will keep
                        looping
  155 00000040         ;;;  until the user presses any of the four buttons
  156 00000040         ;;; 
  157 00000040         ;;; Promise: Returns R0 which is the seed for the random
                       izer
  158 00000040         ;;;



ARM Macro Assembler    Page 6 


  159 00000040         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  160 00000040         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  161 00000040         
  162 00000040         waiting proc
  163 00000040         
  164 00000040 F10A 0A01       add              r10, #1     ;counter for random
                                                            
  165 00000044         
  166 00000044 49CE            ldr              r1, =GPIOA_ODR
  167 00000046 4ACF            ldr              r2, =DELAYTIME
  168 00000048         
  169 00000048 4DCF            ldr              r5, =GPIOB_IDR 
                                                            ;Red and Black PB
  170 0000004A 4ED0            ldr              r6, =GPIOC_IDR ;Blue PB
  171 0000004C 4FD0            ldr              r7, =GPIOA_IDR ;Green PB
  172 0000004E         
  173 0000004E         loop
  174 0000004E 4613            mov              r3, r2      ;sets r3 as temp re
                                                            gister for DELAYTIM
                                                            E
  175 00000050 F10A 0A01       add              r10, #1     ;counter for random
                                                            
  176 00000054         led_1
  177 00000054 F10A 0A01       add              r10, #1     ;counter for random
                                                            
  178 00000058         
  179 00000058 F8D5 8000       ldr              r8, [r5]    ;gets the input fro
                                                            m port B
  180 0000005C F408 7840       and              r8, #0x300  ;masks 0x300 to get
                                                             just values from p
                                                            in 8 and 9
  181 00000060 F8D6 9000       ldr              r9, [r6]    ;gets the input fro
                                                            m port C
  182 00000064 F409 5980       and              r9, #0x1000 ;masks 0x1000 to ge
                                                            t just values from 
                                                            pin 12
  183 00000068 EB18 0809       adds             r8, r9      ;combines the outpu
                                                            ts from r8 and r9
  184 0000006C F8D7 9000       ldr              r9, [r7]    ;gets the input fro
                                                            m port A
  185 00000070 F009 0920       and              r9, #0x20   ;masks 0x20 to get 
                                                            just values from pi
                                                            n 7
  186 00000074 EB18 0009       adds             r0, r8, r9  ;combines all the o
                                                            utputs together
  187 00000078 F5B0 5F99       cmp              r0, #0x1320 ;checks if any butt
                                                            on is pressed
  188 0000007C D15B            BNE              button_pushed
  189 0000007E         ;;;;;;
  190 0000007E F44F 50E0       mov              r0, #0x1C00 ;sets up light to t
                                                            urn on
  191 00000082 6008            str              r0, [r1]    ;turns on the light
                                                            
  192 00000084 3B01            subs             r3, #1      ;decrements the del
                                                            ay
  193 00000086 2B00            cmp              r3, #0      ;if zero, move on t
                                                            o next LED



ARM Macro Assembler    Page 7 


  194 00000088 D1E4            BNE              led_1
  195 0000008A 4613            mov              r3, r2      ;reset delay
  196 0000008C         led_2
  197 0000008C         
  198 0000008C F10A 0A01       add              r10, #1     ;counter for random
                                                            
  199 00000090         
  200 00000090 F8D5 8000       ldr              r8, [r5]    ;gets the input fro
                                                            m port B
  201 00000094 F408 7840       and              r8, #0x300  ;masks 0x300 to get
                                                             just values from p
                                                            in 8 and 9
  202 00000098 F8D6 9000       ldr              r9, [r6]    ;gets the input fro
                                                            m port C
  203 0000009C F409 5980       and              r9, #0x1000 ;masks 0x1000 to ge
                                                            t just values from 
                                                            pin 12
  204 000000A0 EB18 0809       adds             r8, r9      ;combines the outpu
                                                            ts from r8 and r9
  205 000000A4 F8D7 9000       ldr              r9, [r7]    ;gets the input fro
                                                            m port A
  206 000000A8 F009 0920       and              r9, #0x20   ;masks 0x20 to get 
                                                            just values from pi
                                                            n 7
  207 000000AC EB18 0009       adds             r0, r8, r9  ;combines all the o
                                                            utputs together
  208 000000B0 F5B0 5F99       cmp              r0, #0x1320 ;checks if any butt
                                                            on is pressed
  209 000000B4 D13F            BNE              button_pushed
  210 000000B6         ;;;;;;
  211 000000B6         
  212 000000B6 F44F 50D0       mov              r0, #0x1A00 ;sets up light to t
                                                            urn on
  213 000000BA 6008            str              r0, [r1]    ;turns on the light
                                                            
  214 000000BC 3B01            subs             r3, #1      ;decrements the del
                                                            ay
  215 000000BE 2B00            cmp              r3, #0      ;if zero, move on t
                                                            o next LED
  216 000000C0 D1E4            BNE              led_2
  217 000000C2 4613            mov              r3, r2      ;reset delay
  218 000000C4         led_3
  219 000000C4 F10A 0A01       add              r10, #1     ;counter for random
                                                            
  220 000000C8         
  221 000000C8 F8D5 8000       ldr              r8, [r5]    ;gets the input fro
                                                            m port B
  222 000000CC F408 7840       and              r8, #0x300  ;masks 0x300 to get
                                                             just values from p
                                                            in 8 and 9
  223 000000D0 F8D6 9000       ldr              r9, [r6]    ;gets the input fro
                                                            m port C
  224 000000D4 F409 5980       and              r9, #0x1000 ;masks 0x1000 to ge
                                                            t just values from 
                                                            pin 12
  225 000000D8 EB18 0809       adds             r8, r9      ;combines the outpu
                                                            ts from r8 and r9
  226 000000DC F8D7 9000       ldr              r9, [r7]    ;gets the input fro
                                                            m port A



ARM Macro Assembler    Page 8 


  227 000000E0 F009 0920       and              r9, #0x20   ;masks 0x20 to get 
                                                            just values from pi
                                                            n 7
  228 000000E4 EB18 0009       adds             r0, r8, r9  ;combines all the o
                                                            utputs together
  229 000000E8 F5B0 5F99       cmp              r0, #0x1320 ;checks if any butt
                                                            on is pressed
  230 000000EC D123            BNE              button_pushed
  231 000000EE         ;;;;;;
  232 000000EE         
  233 000000EE F44F 50B0       mov              r0, #0x1600 ;sets up light to t
                                                            urn on
  234 000000F2 6008            str              r0, [r1]    ;turns on the light
                                                            
  235 000000F4 3B01            subs             r3, #1      ;decrements the del
                                                            ay
  236 000000F6 2B00            cmp              r3, #0      ;if zero, move on t
                                                            o next LED
  237 000000F8 D1E4            BNE              led_3
  238 000000FA 4613            mov              r3, r2      ;reset delay
  239 000000FC         led_4
  240 000000FC         
  241 000000FC F10A 0A01       add              r10, #1     ;counter for random
                                                            
  242 00000100         
  243 00000100 F8D5 8000       ldr              r8, [r5]    ;gets the input fro
                                                            m port B
  244 00000104 F408 7840       and              r8, #0x300  ;masks 0x300 to get
                                                             just values from p
                                                            in 8 and 9
  245 00000108 F8D6 9000       ldr              r9, [r6]    ;gets the input fro
                                                            m port C
  246 0000010C F409 5980       and              r9, #0x1000 ;masks 0x1000 to ge
                                                            t just values from 
                                                            pin 12
  247 00000110 EB18 0809       adds             r8, r9      ;combines the outpu
                                                            ts from r8 and r9
  248 00000114 F8D7 9000       ldr              r9, [r7]    ;gets the input fro
                                                            m port A
  249 00000118 F009 0920       and              r9, #0x20   ;masks 0x20 to get 
                                                            just values from pi
                                                            n 7
  250 0000011C EB18 0009       adds             r0, r8, r9  ;combines all the o
                                                            utputs together
  251 00000120 F5B0 5F99       cmp              r0, #0x1320 ;checks if any butt
                                                            on is pressed
  252 00000124 D107            BNE              button_pushed
  253 00000126         ;;;;;;
  254 00000126         
  255 00000126 F44F 6060       mov              r0, #0x0E00 ;sets up light to t
                                                            urn on
  256 0000012A 6008            str              r0, [r1]    ;turns on the light
                                                            
  257 0000012C 3B01            subs             r3, #1      ;decrements the del
                                                            ay
  258 0000012E 2B00            cmp              r3, #0      ;if zero, move on t
                                                            o next LED
  259 00000130 D1E4            BNE              led_4
  260 00000132         



ARM Macro Assembler    Page 9 


  261 00000132 4613            mov              r3, r2      ;reset delay
  262 00000134         ;mov r4, #1
  263 00000134         
  264 00000134 E78B            B                loop
  265 00000136         
  266 00000136         button_pushed
  267 00000136 4650            mov              r0, r10     ;sets up r0 as the 
                                                            output for this fuc
                                                            ntion 
  268 00000138 F64F 7CFF       mov              r12, #0xFFFF
  269 0000013C F8C1 C000       str              r12, [r1]   ;turn the LEDs off
  270 00000140 4770            bx               lr
  271 00000142                 endp
  272 00000142         
  273 00000142         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  274 00000142         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  275 00000142         ;;;
  276 00000142         ;;; Subroutine: normalGameplay
  277 00000142         ;;; 
  278 00000142         ;;; UC3 - Normal Game Play
  279 00000142         ;;; This function will is the meat of this project.
  280 00000142         ;;; Sets up reaction time
  281 00000142         ;;; Does a preliminary delay before displaying a random 
                       LED
  282 00000142         ;;; Calls LED_picker function to pick with LED to displa
                       y
  283 00000142         ;;; Calls level_select function to determine the current
                        level
  284 00000142         ;;; Calls get_input to get the user input
  285 00000142         ;;; Will loop until user wins or loses
  286 00000142         ;;; 
  287 00000142         ;;; Promise: Returns R0 which determines whether the use
                       r wins or loses
  288 00000142         ;;;
  289 00000142         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  290 00000142         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  291 00000142         normalGameplay
                               proc
  292 00000142         
  293 00000142 F8DF A250       ldr              r10, =ReactTime ;sets up regist
                                                            er for reaction tim
                                                            e
  294 00000146 F04F 0400       mov              r4, #0      ;resets r4 to use f
                                                            or the level select
                                                            ion
  295 0000014A B410            push             {r4}        ;pushes r4 in to th
                                                            e stack
  296 0000014C         
  297 0000014C         game_mode
  298 0000014C BC10            pop{r4}                      ;gets current level
                                                             from the stack
  299 0000014E 3401            adds             r4, #1      ;increments level
  300 00000150 4991            ldr              r1, =PrelimWait ;sets up regist
                                                            er for preliminary 
                                                            wait



ARM Macro Assembler    Page 10 


  301 00000152         
  302 00000152         
  303 00000152         PrelimWait_label                     ;loops until counte
                                                            r for Preliminary w
                                                            ait reaches zero
  304 00000152 4B8B            ldr              r3, =GPIOA_ODR
  305 00000154         
  306 00000154 F64F 72FF       mov              r2, #0xFFFF ;turns off LEDs
  307 00000158 601A            str              r2, [r3]
  308 0000015A         
  309 0000015A 3901            subs             r1, #1      ;decrement for time
                                                            r
  310 0000015C 2900            cmp              r1, #0
  311 0000015E D1F8            bne              PrelimWait_label
  312 00000160         
  313 00000160 B500            push{lr}                     ;pushes lr to stack
                                                             to save it
  314 00000162 F7FF FFFE       bl               LED_picker  ;function call = a 
                                                            pseudo-random LED t
                                                            urns on == register
                                                            : r11
  315 00000166 F85D EB04       pop{lr}                      ;gets lr to mainfun
                                                            ction back
  316 0000016A         
  317 0000016A B500            push{lr}                     ;pushes lr to stack
                                                             to save it
  318 0000016C F7FF FFFE       bl               level_select ;function call = r
                                                            eaction time for th
                                                            e current level is 
                                                            returned
  319 00000170 F85D EB04       pop{lr}                      ;gets lr to mainfun
                                                            ction back
  320 00000174         
  321 00000174 2C64            cmp              r4, #100    ;if the user reache
                                                            s last value, user 
                                                            wins!
  322 00000176 D011            beq              win
  323 00000178         
  324 00000178         keep_timing
  325 00000178 B500            push             {lr}        ;pushes lr to stack
                                                             to save it
  326 0000017A F7FF FFFE       bl               get_input   ;function call = ge
                                                            ts the input from u
                                                            ser == register: r1
                                                            2
  327 0000017E F85D EB04       pop              {lr}        ;gets lr to mainfun
                                                            ction back
  328 00000182         
  329 00000182 F1BC 0F00       cmp              r12, #0     ;if the user did no
                                                            t pick an input dur
                                                            ing the current cyc
                                                            le, decrement the t
                                                            ime
  330 00000186 D003            beq              time_some_more
  331 00000188         
  332 00000188 45DC            cmp              r12, r11    ;checks if the led 
                                                            and user input matc
                                                            hes, if they do, mo
                                                            ve on. Otherwise, u



ARM Macro Assembler    Page 11 


                                                            ser loses
  333 0000018A D10A            bne              lose
  334 0000018C         
  335 0000018C 4650            mov              r0, r10     ;sets up r0 as temp
                                                             register for the c
                                                            urrent reaction tim
                                                            e
  336 0000018E E7DD            b                game_mode
  337 00000190         
  338 00000190         time_some_more
  339 00000190 F1BA 0A01       subs             r10, #1     ;decremtns time unt
                                                            il 0
  340 00000194 F1BA 0F00       cmp              r10, #0
  341 00000198 D003            beq              lose        ;user lost by runni
                                                            ng out of time
  342 0000019A E7ED            b                keep_timing
  343 0000019C         
  344 0000019C         win
  345 0000019C F04F 0001       mov              r0, #1      ;if user wins, retu
                                                            rn 1
  346 000001A0 4770            bx               lr
  347 000001A2         
  348 000001A2         lose
  349 000001A2 F04F 0000       mov              r0, #0      ;if user loses, ret
                                                            urn 0, and current 
                                                            level
  350 000001A6 BC02            pop              {r1}
  351 000001A8 4770            bx               lr
  352 000001AA         
  353 000001AA                 endp
  354 000001AA         
  355 000001AA         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  356 000001AA         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  357 000001AA         ;;;
  358 000001AA         ;;; Subroutine: win_mode
  359 000001AA         ;;; 
  360 000001AA         ;;; UC4 - End Success
  361 000001AA         ;;; Displays the winning signal
  362 000001AA         ;;; Two pairs of LEDs turning on in a pattern
  363 000001AA         ;;; Will stay here in until timer runs out
  364 000001AA         ;;; Will go back to UC2
  365 000001AA         ;;;
  366 000001AA         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  367 000001AA         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  368 000001AA         
  369 000001AA         win_mode
                               proc
  370 000001AA 4B76            ldr              r3, =WinLoseDelay
  371 000001AC         
  372 000001AC F44F 50A0       mov              r0, #0x1400 ;first LED pair
  373 000001B0 F44F 6120       mov              r1, #0x0A00 ;second LED pair
  374 000001B4 4A72            ldr              r2, =GPIOA_ODR
  375 000001B6 4D79            ldr              r5, =TimeToGoBack
  376 000001B8         
  377 000001B8         winLoop_1



ARM Macro Assembler    Page 12 


  378 000001B8 6010            str              r0, [r2]    ;turns on first pai
                                                            r
  379 000001BA 3401            adds             r4, #1      ;increments delay w
                                                            hen the pair is on
  380 000001BC         
  381 000001BC 3D01            subs             r5, #1      ;decrements return 
                                                            to main timer
  382 000001BE 2D00            cmp              r5, #0
  383 000001C0 D00A            beq              win_done    ;returns to main of
                                                             timer is done
  384 000001C2         
  385 000001C2 429C            cmp              r4, r3      ;checks if the time
                                                            r for the LED pair 
                                                            is done, if so, mov
                                                            e on to the next pa
                                                            ir
  386 000001C4 D000            beq              winLoop_2
  387 000001C6 E7F7            b                winLoop_1
  388 000001C8         winLoop_2
  389 000001C8 6011            str              r1, [r2]    ;turns on second pa
                                                            ir
  390 000001CA 3C01            subs             r4, #1      ;decrements delay w
                                                            hen the pair is on
  391 000001CC         
  392 000001CC 3D01            subs             r5, #1      ;decrements return 
                                                            to main timer
  393 000001CE 2D00            cmp              r5, #0
  394 000001D0 D002            beq              win_done    ;returns to main of
                                                             timer is done
  395 000001D2         
  396 000001D2 2C00            cmp              r4, #0      ;checks if the time
                                                            r for the LED pair 
                                                            is done, if so, mov
                                                            e on to the next pa
                                                            ir
  397 000001D4 D0F0            beq              winLoop_1
  398 000001D6 E7F7            b                winLoop_2
  399 000001D8         
  400 000001D8         win_done
  401 000001D8 4770            bx               lr
  402 000001DA         
  403 000001DA                 endp
  404 000001DA         
  405 000001DA         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  406 000001DA         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  407 000001DA         ;;;
  408 000001DA         ;;; Subroutine: lose_mode
  409 000001DA         ;;; 
  410 000001DA         ;;; UC4 - End Failure
  411 000001DA         ;;; Displays binary value of the current level
  412 000001DA         ;;; Will blink until timer runs out
  413 000001DA         ;;; Will go back to UC2
  414 000001DA         ;;;
  415 000001DA         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  416 000001DA         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;



ARM Macro Assembler    Page 13 


  417 000001DA         
  418 000001DA         lose_mode
                               proc
  419 000001DA 4A69            ldr              r2, =GPIOA_ODR
  420 000001DC 4B6F            ldr              r3, =TimeToGoBack
  421 000001DE 4C69            ldr              r4, =WinLoseDelay
  422 000001E0 F04F 0500       mov              r5, #0
  423 000001E4         
  424 000001E4         loseLoop_1                           ;determines which l
                                                            evel the user lost
  425 000001E4 2901            cmp              r1, #1
  426 000001E6 D00D            beq              lose_1
  427 000001E8 2902            cmp              r1, #2
  428 000001EA D00E            beq              lose_2
  429 000001EC 2903            cmp              r1, #3
  430 000001EE D00F            beq              lose_3
  431 000001F0 2904            cmp              r1, #4
  432 000001F2 D010            beq              lose_4
  433 000001F4 2905            cmp              r1, #5
  434 000001F6 D011            beq              lose_5
  435 000001F8 2906            cmp              r1, #6
  436 000001FA D012            beq              lose_6
  437 000001FC 2907            cmp              r1, #7
  438 000001FE D013            beq              lose_7
  439 00000200 2908            cmp              r1, #8
  440 00000202 D014            beq              lose_8
  441 00000204         
  442 00000204         lose_1                               ;determines which L
                                                            ED to turn on
  443 00000204 F44F 6060       mov              r0, #0x0E00
  444 00000208 E013            b                lose_display
  445 0000020A         lose_2
  446 0000020A F44F 50B0       mov              r0, #0x1600
  447 0000020E E010            b                lose_display
  448 00000210         lose_3
  449 00000210 F44F 60C0       mov              r0, #0x0600
  450 00000214 E00D            b                lose_display
  451 00000216         lose_4
  452 00000216 F44F 50D0       mov              r0, #0x1A00
  453 0000021A E00A            b                lose_display
  454 0000021C         lose_5
  455 0000021C F44F 6020       mov              r0, #0x0A00
  456 00000220 E007            b                lose_display
  457 00000222         lose_6
  458 00000222 F44F 5090       mov              r0, #0x1200
  459 00000226 E004            b                lose_display
  460 00000228         lose_7
  461 00000228 F44F 7000       mov              r0, #0x0200
  462 0000022C E001            b                lose_display
  463 0000022E         lose_8
  464 0000022E F44F 50E0       mov              r0, #0x1C00
  465 00000232         
  466 00000232         lose_display
  467 00000232 6010            str              r0, [r2]    ;displays LED based
                                                             on the current lev
                                                            el
  468 00000234 3501            adds             r5, #1      ;increments until i
                                                            t is equal to the d
                                                            elay. It will move 



ARM Macro Assembler    Page 14 


                                                            on to the next patt
                                                            ern
  469 00000236         
  470 00000236 3B01            subs             r3, #1      ;decrements timer t
                                                            o go back to main
  471 00000238 2B00            cmp              r3, #0
  472 0000023A D00C            beq              lose_done
  473 0000023C         
  474 0000023C 42A5            cmp              r5, r4
  475 0000023E D000            beq              loseLoop_2
  476 00000240 E7D0            b                loseLoop_1
  477 00000242         
  478 00000242         loseLoop_2
  479 00000242 F64F 70FF       mov              r0, #0xFFFF
  480 00000246 6010            str              r0, [r2]    ;turns the LEDs off
                                                            
  481 00000248 3D01            subs             r5, #1      ;decrements until i
                                                            t is equal to 0. It
                                                             will move on to th
                                                            e next pattern
  482 0000024A         
  483 0000024A 3B01            subs             r3, #1      ;decrements timer t
                                                            o go back to main
  484 0000024C 2B00            cmp              r3, #0
  485 0000024E D002            beq              lose_done
  486 00000250         
  487 00000250 2D00            cmp              r5, #0
  488 00000252 D0C7            beq              loseLoop_1
  489 00000254 E7F5            b                loseLoop_2
  490 00000256         
  491 00000256         
  492 00000256         lose_done
  493 00000256 4770            bx               lr
  494 00000258                 endp
  495 00000258         
  496 00000258         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  497 00000258         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  498 00000258         ;;;
  499 00000258         ;;; Subroutine: LED_picker
  500 00000258         ;;; 
  501 00000258         ;;; Turns on a pseudo-random LED based on the user's rea
                       ction time.
  502 00000258         ;;; Uses this formula: X = Ay+C where y is the timer, A 
                       and C are contants
  503 00000258         ;;; Returns R11
  504 00000258         ;;;
  505 00000258         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  506 00000258         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  507 00000258         LED_picker
                               proc
  508 00000258 4D49            ldr              r5, =GPIOA_ODR
  509 0000025A         
  510 0000025A F243 0239       ldr              r2, =A
  511 0000025E 4B50            ldr              r3, =C
  512 00000260 FB00 F002       mul              r0, r2      ;A*Y



ARM Macro Assembler    Page 15 


  513 00000264 4418            add              r0, r3      ;(A*Y) + C
  514 00000266 F000 0003       and              r0, #3      ;Masks to get the l
                                                            ast two bits for wh
                                                            ich LED
  515 0000026A         
  516 0000026A 3001            adds             r0, #1      ;increment bit by 1
                                                             so it's easier for
                                                             me to understand
  517 0000026C         
  518 0000026C         ;next code block determines which LED to turn on
  519 0000026C 2801            cmp              r0, #1
  520 0000026E D005            BEQ              led1
  521 00000270 2802            cmp              r0, #2
  522 00000272 D008            BEQ              led2
  523 00000274 2803            cmp              r0, #3
  524 00000276 D00B            BEQ              led3
  525 00000278 2804            cmp              r0, #4
  526 0000027A D00E            BEQ              led4
  527 0000027C         
  528 0000027C         led1
  529 0000027C F04F 0B01       mov              r11, #1
  530 00000280 F44F 50E0       mov              r0, #0x1C00
  531 00000284 E00E            b                displayLight
  532 00000286         led2
  533 00000286 F04F 0B02       mov              r11, #2
  534 0000028A F44F 50D0       mov              r0, #0x1A00
  535 0000028E E009            b                displayLight
  536 00000290         led3
  537 00000290 F04F 0B03       mov              r11, #3
  538 00000294 F44F 50B0       mov              r0, #0x1600
  539 00000298 E004            b                displayLight
  540 0000029A         led4
  541 0000029A F04F 0B04       mov              r11, #4
  542 0000029E F44F 6060       mov              r0, #0x0E00
  543 000002A2 E7FF            b                displayLight
  544 000002A4         
  545 000002A4         displayLight
  546 000002A4 6028            str              r0, [r5]    ;displays the LED
  547 000002A6 4770            bx               lr
  548 000002A8                 endp
  549 000002A8         
  550 000002A8         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  551 000002A8         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  552 000002A8         ;;;
  553 000002A8         ;;; Subroutine: get_input
  554 000002A8         ;;; 
  555 000002A8         ;;; Gets the value of the button the user picked
  556 000002A8         ;;; Returns R12 for comparing
  557 000002A8         ;;;
  558 000002A8         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  559 000002A8         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  560 000002A8         get_input
                               proc
  561 000002A8 4C37            ldr              r4, =GPIOB_IDR 
                                                            ;Red and Black PB



ARM Macro Assembler    Page 16 


  562 000002AA 4D38            ldr              r5, =GPIOC_IDR ;Blue PB
  563 000002AC 4E38            ldr              r6, =GPIOA_IDR ;Green PB
  564 000002AE         
  565 000002AE 6827            ldr              r7, [r4]
  566 000002B0 F8D4 8000       ldr              r8, [r4]
  567 000002B4 F8D5 9000       ldr              r9, [r5]
  568 000002B8 6833            ldr              r3, [r6]
  569 000002BA         
  570 000002BA         ;next codeblock determines the button pressed by masking
                       
  571 000002BA F407 7780       and              r7, #0x100
  572 000002BE F5B7 7F80       cmp              r7, #0x100
  573 000002C2 D110            bne              red_button
  574 000002C4         
  575 000002C4 F408 7800       and              r8, #0x200
  576 000002C8 F5B8 7F00       cmp              r8, #0x200
  577 000002CC D10E            bne              black_button
  578 000002CE         
  579 000002CE F409 5980       and              r9, #0x1000
  580 000002D2 F5B9 5F80       cmp              r9, #0x1000
  581 000002D6 D10C            bne              blue_button
  582 000002D8         
  583 000002D8 F003 0320       and              r3, #0x20
  584 000002DC 2B20            cmp              r3, #0x20
  585 000002DE D10B            bne              green_button
  586 000002E0         
  587 000002E0 F04F 0C00       mov              r12, #0
  588 000002E4 4770            bx               lr
  589 000002E6         
  590 000002E6         ;next codeblock returns a vlue based on the button press
                       ed
  591 000002E6         red_button
  592 000002E6 F04F 0C01       mov              r12, #1
  593 000002EA 4770            bx               lr
  594 000002EC         black_button
  595 000002EC F04F 0C02       mov              r12, #2
  596 000002F0 4770            bx               lr
  597 000002F2         blue_button
  598 000002F2 F04F 0C03       mov              r12, #3
  599 000002F6 4770            bx               lr
  600 000002F8         green_button
  601 000002F8 F04F 0C04       mov              r12, #4
  602 000002FC 4770            bx               lr
  603 000002FE                 endp
  604 000002FE         
  605 000002FE         
  606 000002FE         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  607 000002FE         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  608 000002FE         ;;;
  609 000002FE         ;;; Subroutine: level_select
  610 000002FE         ;;; 
  611 000002FE         ;;; Updates the current reaction time based on the level
                       
  612 000002FE         ;;; Returns reaction time
  613 000002FE         ;;; Divides the current reaction on the level
  614 000002FE         ;;; eg) level 2: ==== reactiontime/2
  615 000002FE         ;;;



ARM Macro Assembler    Page 17 


  616 000002FE         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  617 000002FE         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;
  618 000002FE         level_select
                               proc
  619 000002FE 4825            ldr              r0, =ReactTime
  620 00000300         
  621 00000300         ;comparisons based on the level
  622 00000300 2C01            cmp              r4, #1
  623 00000302 D011            beq              level_1
  624 00000304         
  625 00000304 2C02            cmp              r4, #2
  626 00000306 D014            beq              level_2
  627 00000308         
  628 00000308 2C03            cmp              r4, #3
  629 0000030A D017            beq              level_3
  630 0000030C         
  631 0000030C 2C04            cmp              r4, #4
  632 0000030E D01A            beq              level_4
  633 00000310         
  634 00000310 2C05            cmp              r4, #5
  635 00000312 D01D            beq              level_5
  636 00000314         
  637 00000314 2C06            cmp              r4, #6
  638 00000316 D020            beq              level_6
  639 00000318         
  640 00000318 2C07            cmp              r4, #7
  641 0000031A D023            beq              level_7
  642 0000031C         
  643 0000031C 2C08            cmp              r4, #8
  644 0000031E D026            beq              level_8
  645 00000320         
  646 00000320 F04F 0464       mov              r4, #100
  647 00000324 9401            str              r4, [sp, #4] ;r4 is stored in t
                                                            he stack -- offset 
                                                            is used so the the 
                                                            top of the stack is
                                                             not chacnged (LR)
  648 00000326 4770            bx               lr
  649 00000328         
  650 00000328         level_1
  651 00000328 FB90 F0F4       sdiv             r0, r4      ; division
  652 0000032C 4682            mov              r10, r0     ; current reaction 
                                                            time is updated ==s
                                                            ame concept for the
                                                             rest of the block
  653 0000032E 9401            str              r4, [sp, #4]
  654 00000330 4770            bx               lr
  655 00000332         
  656 00000332         level_2
  657 00000332 FB90 F0F4       sdiv             r0, r4
  658 00000336 4682            mov              r10, r0
  659 00000338 9401            str              r4, [sp, #4]
  660 0000033A 4770            bx               lr
  661 0000033C         
  662 0000033C         level_3
  663 0000033C FB90 F0F4       sdiv             r0, r4
  664 00000340 4682            mov              r10, r0



ARM Macro Assembler    Page 18 


  665 00000342 9401            str              r4, [sp, #4]
  666 00000344 4770            bx               lr
  667 00000346         
  668 00000346         level_4
  669 00000346 FB90 F0F4       sdiv             r0, r4
  670 0000034A 4682            mov              r10, r0
  671 0000034C 9401            str              r4, [sp, #4]
  672 0000034E 4770            bx               lr
  673 00000350         
  674 00000350         level_5
  675 00000350 FB90 F0F4       sdiv             r0, r4
  676 00000354 4682            mov              r10, r0
  677 00000356 9401            str              r4, [sp, #4]
  678 00000358 4770            bx               lr
  679 0000035A         
  680 0000035A         level_6
  681 0000035A FB90 F0F4       sdiv             r0, r4
  682 0000035E 4682            mov              r10, r0
  683 00000360 9401            str              r4, [sp, #4]
  684 00000362 4770            bx               lr
  685 00000364         
  686 00000364         level_7
  687 00000364 FB90 F0F4       sdiv             r0, r4
  688 00000368 4682            mov              r10, r0
  689 0000036A 9401            str              r4, [sp, #4]
  690 0000036C 4770            bx               lr
  691 0000036E         
  692 0000036E         level_8
  693 0000036E FB90 F0F4       sdiv             r0, r4
  694 00000372 4682            mov              r10, r0
  695 00000374 9401            str              r4, [sp, #4]
  696 00000376 4770            bx               lr
  697 00000378         
  698 00000378                 endp
  699 00000378         
  700 00000378         
  701 00000378                 align
  702 00000378                 end
              40021018 
              40010804 
              4001080C 
              000186A0 
              40010C08 
              40011008 
              40010808 
              00061A80 
              000C3500 
              00249F00 
              00010932 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\352proj.d -o.\objects\352proj.o -I.\RTE\_Target_1 -IC:\K
eil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\
Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 525" --
predefine="STM32F10X_MD_VL SETA 1" --list=.\listings\352proj.lst 352proj.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 83 in file 352proj.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 86 in file 352proj.s
   Uses
      At line 84 in file 352proj.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

GPIO_ClockInit 00000024

Symbol: GPIO_ClockInit
   Definitions
      At line 120 in file 352proj.s
   Uses
      At line 95 in file 352proj.s
Comment: GPIO_ClockInit used once
GPIO_init 00000030

Symbol: GPIO_init
   Definitions
      At line 136 in file 352proj.s
   Uses
      At line 96 in file 352proj.s
Comment: GPIO_init used once
LED_picker 00000258

Symbol: LED_picker
   Definitions
      At line 507 in file 352proj.s
   Uses
      At line 314 in file 352proj.s
Comment: LED_picker used once
MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 89 in file 352proj.s
   Uses
      None
Comment: MYCODE unused
PrelimWait_label 00000152

Symbol: PrelimWait_label
   Definitions
      At line 303 in file 352proj.s
   Uses
      At line 311 in file 352proj.s
Comment: PrelimWait_label used once
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 93 in file 352proj.s
   Uses
      At line 87 in file 352proj.s
      At line 90 in file 352proj.s

black_button 000002EC

Symbol: black_button
   Definitions
      At line 594 in file 352proj.s
   Uses
      At line 577 in file 352proj.s
Comment: black_button used once
blue_button 000002F2




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: blue_button
   Definitions
      At line 597 in file 352proj.s
   Uses
      At line 581 in file 352proj.s
Comment: blue_button used once
button_pushed 00000136

Symbol: button_pushed
   Definitions
      At line 266 in file 352proj.s
   Uses
      At line 188 in file 352proj.s
      At line 209 in file 352proj.s
      At line 230 in file 352proj.s
      At line 252 in file 352proj.s

displayLight 000002A4

Symbol: displayLight
   Definitions
      At line 545 in file 352proj.s
   Uses
      At line 531 in file 352proj.s
      At line 535 in file 352proj.s
      At line 539 in file 352proj.s
      At line 543 in file 352proj.s

game_mode 0000014C

Symbol: game_mode
   Definitions
      At line 297 in file 352proj.s
   Uses
      At line 336 in file 352proj.s
Comment: game_mode used once
get_input 000002A8

Symbol: get_input
   Definitions
      At line 560 in file 352proj.s
   Uses
      At line 326 in file 352proj.s
Comment: get_input used once
green_button 000002F8

Symbol: green_button
   Definitions
      At line 600 in file 352proj.s
   Uses
      At line 585 in file 352proj.s
Comment: green_button used once
keep_timing 00000178

Symbol: keep_timing
   Definitions
      At line 324 in file 352proj.s
   Uses
      At line 342 in file 352proj.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: keep_timing used once
led1 0000027C

Symbol: led1
   Definitions
      At line 528 in file 352proj.s
   Uses
      At line 520 in file 352proj.s
Comment: led1 used once
led2 00000286

Symbol: led2
   Definitions
      At line 532 in file 352proj.s
   Uses
      At line 522 in file 352proj.s
Comment: led2 used once
led3 00000290

Symbol: led3
   Definitions
      At line 536 in file 352proj.s
   Uses
      At line 524 in file 352proj.s
Comment: led3 used once
led4 0000029A

Symbol: led4
   Definitions
      At line 540 in file 352proj.s
   Uses
      At line 526 in file 352proj.s
Comment: led4 used once
led_1 00000054

Symbol: led_1
   Definitions
      At line 176 in file 352proj.s
   Uses
      At line 194 in file 352proj.s
Comment: led_1 used once
led_2 0000008C

Symbol: led_2
   Definitions
      At line 196 in file 352proj.s
   Uses
      At line 216 in file 352proj.s
Comment: led_2 used once
led_3 000000C4

Symbol: led_3
   Definitions
      At line 218 in file 352proj.s
   Uses
      At line 237 in file 352proj.s
Comment: led_3 used once
led_4 000000FC




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: led_4
   Definitions
      At line 239 in file 352proj.s
   Uses
      At line 259 in file 352proj.s
Comment: led_4 used once
level_1 00000328

Symbol: level_1
   Definitions
      At line 650 in file 352proj.s
   Uses
      At line 623 in file 352proj.s
Comment: level_1 used once
level_2 00000332

Symbol: level_2
   Definitions
      At line 656 in file 352proj.s
   Uses
      At line 626 in file 352proj.s
Comment: level_2 used once
level_3 0000033C

Symbol: level_3
   Definitions
      At line 662 in file 352proj.s
   Uses
      At line 629 in file 352proj.s
Comment: level_3 used once
level_4 00000346

Symbol: level_4
   Definitions
      At line 668 in file 352proj.s
   Uses
      At line 632 in file 352proj.s
Comment: level_4 used once
level_5 00000350

Symbol: level_5
   Definitions
      At line 674 in file 352proj.s
   Uses
      At line 635 in file 352proj.s
Comment: level_5 used once
level_6 0000035A

Symbol: level_6
   Definitions
      At line 680 in file 352proj.s
   Uses
      At line 638 in file 352proj.s
Comment: level_6 used once
level_7 00000364

Symbol: level_7
   Definitions
      At line 686 in file 352proj.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 641 in file 352proj.s
Comment: level_7 used once
level_8 0000036E

Symbol: level_8
   Definitions
      At line 692 in file 352proj.s
   Uses
      At line 644 in file 352proj.s
Comment: level_8 used once
level_select 000002FE

Symbol: level_select
   Definitions
      At line 618 in file 352proj.s
   Uses
      At line 318 in file 352proj.s
Comment: level_select used once
loop 0000004E

Symbol: loop
   Definitions
      At line 173 in file 352proj.s
   Uses
      At line 264 in file 352proj.s
Comment: loop used once
lose 000001A2

Symbol: lose
   Definitions
      At line 348 in file 352proj.s
   Uses
      At line 333 in file 352proj.s
      At line 341 in file 352proj.s

loseLoop_1 000001E4

Symbol: loseLoop_1
   Definitions
      At line 424 in file 352proj.s
   Uses
      At line 476 in file 352proj.s
      At line 488 in file 352proj.s

loseLoop_2 00000242

Symbol: loseLoop_2
   Definitions
      At line 478 in file 352proj.s
   Uses
      At line 475 in file 352proj.s
      At line 489 in file 352proj.s

lose_1 00000204

Symbol: lose_1
   Definitions
      At line 442 in file 352proj.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 426 in file 352proj.s
Comment: lose_1 used once
lose_2 0000020A

Symbol: lose_2
   Definitions
      At line 445 in file 352proj.s
   Uses
      At line 428 in file 352proj.s
Comment: lose_2 used once
lose_3 00000210

Symbol: lose_3
   Definitions
      At line 448 in file 352proj.s
   Uses
      At line 430 in file 352proj.s
Comment: lose_3 used once
lose_4 00000216

Symbol: lose_4
   Definitions
      At line 451 in file 352proj.s
   Uses
      At line 432 in file 352proj.s
Comment: lose_4 used once
lose_5 0000021C

Symbol: lose_5
   Definitions
      At line 454 in file 352proj.s
   Uses
      At line 434 in file 352proj.s
Comment: lose_5 used once
lose_6 00000222

Symbol: lose_6
   Definitions
      At line 457 in file 352proj.s
   Uses
      At line 436 in file 352proj.s
Comment: lose_6 used once
lose_7 00000228

Symbol: lose_7
   Definitions
      At line 460 in file 352proj.s
   Uses
      At line 438 in file 352proj.s
Comment: lose_7 used once
lose_8 0000022E

Symbol: lose_8
   Definitions
      At line 463 in file 352proj.s
   Uses
      At line 440 in file 352proj.s
Comment: lose_8 used once



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

lose_display 00000232

Symbol: lose_display
   Definitions
      At line 466 in file 352proj.s
   Uses
      At line 444 in file 352proj.s
      At line 447 in file 352proj.s
      At line 450 in file 352proj.s
      At line 453 in file 352proj.s
      At line 456 in file 352proj.s
      At line 459 in file 352proj.s
      At line 462 in file 352proj.s

lose_done 00000256

Symbol: lose_done
   Definitions
      At line 492 in file 352proj.s
   Uses
      At line 472 in file 352proj.s
      At line 485 in file 352proj.s

lose_main 0000001E

Symbol: lose_main
   Definitions
      At line 110 in file 352proj.s
   Uses
      At line 105 in file 352proj.s
Comment: lose_main used once
lose_mode 000001DA

Symbol: lose_mode
   Definitions
      At line 418 in file 352proj.s
   Uses
      At line 111 in file 352proj.s
Comment: lose_mode used once
mainLoop 00000008

Symbol: mainLoop
   Definitions
      At line 98 in file 352proj.s
   Uses
      At line 109 in file 352proj.s
      At line 112 in file 352proj.s

normalGameplay 00000142

Symbol: normalGameplay
   Definitions
      At line 291 in file 352proj.s
   Uses
      At line 100 in file 352proj.s
Comment: normalGameplay used once
red_button 000002E6

Symbol: red_button



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 591 in file 352proj.s
   Uses
      At line 573 in file 352proj.s
Comment: red_button used once
time_some_more 00000190

Symbol: time_some_more
   Definitions
      At line 338 in file 352proj.s
   Uses
      At line 330 in file 352proj.s
Comment: time_some_more used once
waiting 00000040

Symbol: waiting
   Definitions
      At line 162 in file 352proj.s
   Uses
      At line 99 in file 352proj.s
Comment: waiting used once
win 0000019C

Symbol: win
   Definitions
      At line 344 in file 352proj.s
   Uses
      At line 322 in file 352proj.s
Comment: win used once
winLoop_1 000001B8

Symbol: winLoop_1
   Definitions
      At line 377 in file 352proj.s
   Uses
      At line 387 in file 352proj.s
      At line 397 in file 352proj.s

winLoop_2 000001C8

Symbol: winLoop_2
   Definitions
      At line 388 in file 352proj.s
   Uses
      At line 386 in file 352proj.s
      At line 398 in file 352proj.s

win_done 000001D8

Symbol: win_done
   Definitions
      At line 400 in file 352proj.s
   Uses
      At line 383 in file 352proj.s
      At line 394 in file 352proj.s

win_main 00000018

Symbol: win_main



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 107 in file 352proj.s
   Uses
      At line 103 in file 352proj.s
Comment: win_main used once
win_mode 000001AA

Symbol: win_mode
   Definitions
      At line 369 in file 352proj.s
   Uses
      At line 108 in file 352proj.s
Comment: win_mode used once
58 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

A 00003039

Symbol: A
   Definitions
      At line 77 in file 352proj.s
   Uses
      At line 510 in file 352proj.s
Comment: A used once
C 00010932

Symbol: C
   Definitions
      At line 78 in file 352proj.s
   Uses
      At line 511 in file 352proj.s
Comment: C used once
DELAYTIME 000186A0

Symbol: DELAYTIME
   Definitions
      At line 70 in file 352proj.s
   Uses
      At line 167 in file 352proj.s
Comment: DELAYTIME used once
GPIOA_BRR 40010814

Symbol: GPIOA_BRR
   Definitions
      At line 28 in file 352proj.s
   Uses
      None
Comment: GPIOA_BRR unused
GPIOA_BSRR 40010810

Symbol: GPIOA_BSRR
   Definitions
      At line 27 in file 352proj.s
   Uses
      None
Comment: GPIOA_BSRR unused
GPIOA_CRH 40010804

Symbol: GPIOA_CRH
   Definitions
      At line 24 in file 352proj.s
   Uses
      At line 140 in file 352proj.s
Comment: GPIOA_CRH used once
GPIOA_CRL 40010800

Symbol: GPIOA_CRL
   Definitions
      At line 23 in file 352proj.s
   Uses
      None
Comment: GPIOA_CRL unused
GPIOA_IDR 40010808

Symbol: GPIOA_IDR



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 25 in file 352proj.s
   Uses
      At line 171 in file 352proj.s
      At line 563 in file 352proj.s

GPIOA_LCKR 40010818

Symbol: GPIOA_LCKR
   Definitions
      At line 29 in file 352proj.s
   Uses
      None
Comment: GPIOA_LCKR unused
GPIOA_ODR 4001080C

Symbol: GPIOA_ODR
   Definitions
      At line 26 in file 352proj.s
   Uses
      At line 166 in file 352proj.s
      At line 304 in file 352proj.s
      At line 374 in file 352proj.s
      At line 419 in file 352proj.s
      At line 508 in file 352proj.s

GPIOB_BRR 40010C14

Symbol: GPIOB_BRR
   Definitions
      At line 37 in file 352proj.s
   Uses
      None
Comment: GPIOB_BRR unused
GPIOB_BSRR 40010C10

Symbol: GPIOB_BSRR
   Definitions
      At line 36 in file 352proj.s
   Uses
      None
Comment: GPIOB_BSRR unused
GPIOB_CRH 40010C04

Symbol: GPIOB_CRH
   Definitions
      At line 33 in file 352proj.s
   Uses
      None
Comment: GPIOB_CRH unused
GPIOB_CRL 40010C00

Symbol: GPIOB_CRL
   Definitions
      At line 32 in file 352proj.s
   Uses
      None
Comment: GPIOB_CRL unused
GPIOB_IDR 40010C08



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: GPIOB_IDR
   Definitions
      At line 34 in file 352proj.s
   Uses
      At line 169 in file 352proj.s
      At line 561 in file 352proj.s

GPIOB_LCKR 40010C18

Symbol: GPIOB_LCKR
   Definitions
      At line 38 in file 352proj.s
   Uses
      None
Comment: GPIOB_LCKR unused
GPIOB_ODR 40010C0C

Symbol: GPIOB_ODR
   Definitions
      At line 35 in file 352proj.s
   Uses
      None
Comment: GPIOB_ODR unused
GPIOC_BRR 40011014

Symbol: GPIOC_BRR
   Definitions
      At line 47 in file 352proj.s
   Uses
      None
Comment: GPIOC_BRR unused
GPIOC_BSRR 40011010

Symbol: GPIOC_BSRR
   Definitions
      At line 46 in file 352proj.s
   Uses
      None
Comment: GPIOC_BSRR unused
GPIOC_CRH 40011004

Symbol: GPIOC_CRH
   Definitions
      At line 43 in file 352proj.s
   Uses
      None
Comment: GPIOC_CRH unused
GPIOC_CRL 40011000

Symbol: GPIOC_CRL
   Definitions
      At line 42 in file 352proj.s
   Uses
      None
Comment: GPIOC_CRL unused
GPIOC_IDR 40011008

Symbol: GPIOC_IDR



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 44 in file 352proj.s
   Uses
      At line 170 in file 352proj.s
      At line 562 in file 352proj.s

GPIOC_LCKR 40011018

Symbol: GPIOC_LCKR
   Definitions
      At line 48 in file 352proj.s
   Uses
      None
Comment: GPIOC_LCKR unused
GPIOC_ODR 4001100C

Symbol: GPIOC_ODR
   Definitions
      At line 45 in file 352proj.s
   Uses
      None
Comment: GPIOC_ODR unused
INITIAL_MSP 20001000

Symbol: INITIAL_MSP
   Definitions
      At line 19 in file 352proj.s
   Uses
      At line 86 in file 352proj.s
Comment: INITIAL_MSP used once
PrelimWait 000C3500

Symbol: PrelimWait
   Definitions
      At line 71 in file 352proj.s
   Uses
      At line 300 in file 352proj.s
Comment: PrelimWait used once
RCC_AHBENR 40021014

Symbol: RCC_AHBENR
   Definitions
      At line 57 in file 352proj.s
   Uses
      None
Comment: RCC_AHBENR unused
RCC_APB1ENR 4002101C

Symbol: RCC_APB1ENR
   Definitions
      At line 61 in file 352proj.s
   Uses
      None
Comment: RCC_APB1ENR unused
RCC_APB1RSTR 40021010

Symbol: RCC_APB1RSTR
   Definitions
      At line 56 in file 352proj.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

   Uses
      None
Comment: RCC_APB1RSTR unused
RCC_APB2ENR 40021018

Symbol: RCC_APB2ENR
   Definitions
      At line 59 in file 352proj.s
   Uses
      At line 122 in file 352proj.s
Comment: RCC_APB2ENR used once
RCC_APB2RSTR 4002100C

Symbol: RCC_APB2RSTR
   Definitions
      At line 55 in file 352proj.s
   Uses
      None
Comment: RCC_APB2RSTR unused
RCC_BDCR 40021020

Symbol: RCC_BDCR
   Definitions
      At line 62 in file 352proj.s
   Uses
      None
Comment: RCC_BDCR unused
RCC_CFGR 40021004

Symbol: RCC_CFGR
   Definitions
      At line 53 in file 352proj.s
   Uses
      None
Comment: RCC_CFGR unused
RCC_CFGR2 4002102C

Symbol: RCC_CFGR2
   Definitions
      At line 64 in file 352proj.s
   Uses
      None
Comment: RCC_CFGR2 unused
RCC_CIR 40021008

Symbol: RCC_CIR
   Definitions
      At line 54 in file 352proj.s
   Uses
      None
Comment: RCC_CIR unused
RCC_CR 40021000

Symbol: RCC_CR
   Definitions
      At line 52 in file 352proj.s
   Uses
      None
Comment: RCC_CR unused



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

RCC_CSR 40021024

Symbol: RCC_CSR
   Definitions
      At line 63 in file 352proj.s
   Uses
      None
Comment: RCC_CSR unused
ReactTime 00061A80

Symbol: ReactTime
   Definitions
      At line 72 in file 352proj.s
   Uses
      At line 293 in file 352proj.s
      At line 619 in file 352proj.s

TimeToGoBack 00249F00

Symbol: TimeToGoBack
   Definitions
      At line 74 in file 352proj.s
   Uses
      At line 375 in file 352proj.s
      At line 420 in file 352proj.s

WinLoseDelay 000186A0

Symbol: WinLoseDelay
   Definitions
      At line 73 in file 352proj.s
   Uses
      At line 370 in file 352proj.s
      At line 421 in file 352proj.s

40 symbols
435 symbols in table
